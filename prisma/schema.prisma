// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    username      String     @unique
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    comments      Comment[]
    likes         Like[]
    bookmarks     Bookmark[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id            String     @id @default(cuid())
    title         String     @unique
    description   String
    slug          String     @unique
    text          String?    @db.Text
    html          String?    @db.Text
    featuredImage String?
    authorId      String
    created_at    DateTime   @default(now())
    updated_at    DateTime   @updatedAt
    tags          Tag[]
    comments      Comment[]
    likes         Like[]
    bookmarks     Bookmark[]

    author User @relation(fields: [authorId], references: [id])
}

model Tag {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    slug        String  @unique
    posts       Post[]
}

model Comment {
    id         String   @id @unique @default(cuid())
    text       String
    userId     String
    postId     String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])
}

model Like {
    id         String   @id @unique @default(cuid())
    userId     String
    postId     String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}

model Bookmark {
    id        String   @id @unique @default(cuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")
    userId    String
    postId    String

    user User @relation(fields: [userId], references: [id])
    post Post @relation(fields: [postId], references: [id])

    @@unique([userId, postId])
}
